// DashboardÂ∫îÁî®ÈÄªËæë
import { APP_CONSTANTS } from '../core/constants.js';
import configManager from '../core/config.js';
import { showLoading, showToast } from '../utils/dom.js';
import { escapeHtml, formatRelativeTime } from '../utils/format.js';
import { isDevEnv, debounce } from '../utils/helpers.js'; // üîß Ê∑ªÂä†debounceÂØºÂÖ•
import authManager from '../services/auth.js';
import themeManager from '../services/theme.js';
import apiService from '../services/api.js';

export class DashboardApp {
  constructor() {
    this.currentUser = null;
    this.favorites = [];
    this.searchHistory = [];
    this.currentTab = 'overview';
    this.isInitialized = false;
    this.init();
  }

  async init() {
    try {
      // ÂºÄÂèëÁéØÂ¢ÉURL‰øÆÊ≠£
      const isDev = isDevEnv();
      if (isDev && !window.location.pathname.endsWith('.html')) {
        console.log('ÂºÄÂèëÁéØÂ¢É‰øÆÊ≠£URLÂà∞ .html ‰ª•‰æøÊñá‰ª∂Áõ¥ÂºÄ');
        window.location.replace('./dashboard.html' + window.location.search);
        return;
      }
      
      showLoading(true);
      
      // ÂàùÂßãÂåñÈÖçÁΩÆ
      await configManager.init();
      
      // Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ
      await this.checkAuth();
      
      // ÁªëÂÆö‰∫ã‰ª∂
      this.bindEvents();
      
      // Âä†ËΩΩ‰∫ëÁ´ØÊï∞ÊçÆ
      await this.loadCloudData();
      
      // ÂàùÂßãÂåñ‰∏ªÈ¢ò
      themeManager.init();
      
      this.isInitialized = true;
      console.log('‚úÖ DashboardÂàùÂßãÂåñÂÆåÊàê');
      
    } catch (error) {
      console.error('‚ùå DashboardÂàùÂßãÂåñÂ§±Ë¥•:', error);
      showToast('ÂàùÂßãÂåñÂ§±Ë¥•ÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï', 'error');
      
      setTimeout(() => {
        window.location.replace('./index.html');
      }, 2000);
    } finally {
      showLoading(false);
    }
  }

  // Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ
  async checkAuth() {
    const token = localStorage.getItem(APP_CONSTANTS.STORAGE_KEYS.AUTH_TOKEN);
    if (!token) {
      throw new Error('Êú™ÊâæÂà∞ËÆ§ËØÅtoken');
    }

    try {
      const result = await apiService.verifyToken(token);
      if (!result.success || !result.user) {
        throw new Error('TokenÈ™åËØÅÂ§±Ë¥•');
      }
      
      this.currentUser = result.user;
      this.updateUserUI();
    } catch (error) {
      localStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.AUTH_TOKEN);
      throw new Error('ËÆ§ËØÅÂ§±Ë¥•');
    }
  }

  // Á∫Ø‰∫ëÁ´ØÊï∞ÊçÆÂä†ËΩΩ
  async loadCloudData() {
    if (!this.currentUser) {
      console.log('Áî®Êà∑Êú™ÁôªÂΩïÔºåÊó†Ê≥ïÂä†ËΩΩÊï∞ÊçÆ');
      return;
    }

    try {
      // Âπ∂Ë°åÂä†ËΩΩÊî∂ËóèÂ§πÂíåÊêúÁ¥¢ÂéÜÂè≤
      const [favoritesResult, historyResult] = await Promise.allSettled([
        apiService.getFavorites(),
        apiService.getSearchHistory()
      ]);

      // Â§ÑÁêÜÊî∂ËóèÂ§πÊï∞ÊçÆ
      if (favoritesResult.status === 'fulfilled') {
        this.favorites = favoritesResult.value || [];
      } else {
        console.error('Âä†ËΩΩÊî∂ËóèÂ§πÂ§±Ë¥•:', favoritesResult.reason);
        this.favorites = [];
      }

      // Â§ÑÁêÜÊêúÁ¥¢ÂéÜÂè≤Êï∞ÊçÆ
      if (historyResult.status === 'fulfilled') {
        const cloudHistory = historyResult.value || [];
        this.searchHistory = cloudHistory.map(item => ({
          id: item.id || `history_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          keyword: item.keyword || item.query,
          query: item.query || item.keyword,
          source: item.source || 'unknown',
          timestamp: item.timestamp || item.createdAt || Date.now(),
          count: item.count || 1
        })).filter(item => {
          return item.keyword && typeof item.keyword === 'string' && item.keyword.trim().length > 0;
        });
      } else {
        console.error('Âä†ËΩΩÊêúÁ¥¢ÂéÜÂè≤Â§±Ë¥•:', historyResult.reason);
        this.searchHistory = [];
      }

      // Âä†ËΩΩÂΩìÂâçÊ†áÁ≠æÈ°µÊï∞ÊçÆ
      await this.loadTabData(this.currentTab);

    } catch (error) {
      console.error('Âä†ËΩΩ‰∫ëÁ´ØÊï∞ÊçÆÂ§±Ë¥•:', error);
      showToast('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•', 'error');
      this.favorites = [];
      this.searchHistory = [];
    }
  }

  // ÁªëÂÆö‰∫ã‰ª∂
  bindEvents() {
    // Ê†áÁ≠æÂàáÊç¢
    document.querySelectorAll('[data-tab]').forEach(tab => {
      tab.addEventListener('click', () => {
        this.switchTab(tab.dataset.tab);
      });
    });

    // ÈÄÄÂá∫ÁôªÂΩï
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', () => this.logout());
    }

    // Ê®°ÊÄÅÊ°Ü‰∫ã‰ª∂
    this.bindModalEvents();

    // ËÆæÁΩÆË°®Âçï‰∫ã‰ª∂
    this.bindSettingsEvents();
    
    // ÂØÜÁ†Å‰øÆÊîπÊåâÈíÆ
    const changePasswordBtn = document.getElementById('changePasswordBtn');
    if (changePasswordBtn) {
      changePasswordBtn.addEventListener('click', () => this.changePassword());
    }

    // Êï∞ÊçÆÊìç‰ΩúÊåâÈíÆ
    this.bindDataActionButtons();

    // Êî∂ËóèÂ§πÊêúÁ¥¢ÂíåÊéíÂ∫è
    this.bindFavoritesControls();
  }

  // ÁªëÂÆöÊï∞ÊçÆÊìç‰ΩúÊåâÈíÆ
  bindDataActionButtons() {
    const buttonMap = {
      syncAllDataBtn: () => this.syncAllData(),
      exportDataBtn: () => this.exportData(),
      exportFavoritesBtn: () => this.exportFavorites(),
      clearAllHistoryBtn: () => this.clearAllHistory(),
      clearAllDataBtn: () => this.clearAllData(),
      deleteAccountBtn: () => this.deleteAccount(),
      resetSettingsBtn: () => this.resetSettings(),
      saveSettingsBtn: () => this.saveSettings()
    };

    Object.entries(buttonMap).forEach(([id, handler]) => {
      const btn = document.getElementById(id);
      if (btn) btn.addEventListener('click', handler);
    });
  }

  // ÁªëÂÆöÊî∂ËóèÂ§πÊéß‰ª∂ (‰øÆÂ§çdebounce‰ΩøÁî®)
  bindFavoritesControls() {
    const favoritesSearchBtn = document.getElementById('favoritesSearchBtn');
    const favoritesSearch = document.getElementById('favoritesSearch');
    const favoritesSort = document.getElementById('favoritesSort');
    
    if (favoritesSearchBtn) {
      favoritesSearchBtn.addEventListener('click', () => this.searchFavorites());
    }
    
    if (favoritesSearch) {
      // üîß ‰ΩøÁî®Ê≠£Á°ÆÂØºÂÖ•ÁöÑdebounce
      favoritesSearch.addEventListener('input', debounce(() => this.searchFavorites(), 300));
      favoritesSearch.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') this.searchFavorites();
      });
    }
    
    if (favoritesSort) {
      favoritesSort.addEventListener('change', () => this.searchFavorites());
    }
  }

  // ÁªëÂÆöÊ®°ÊÄÅÊ°Ü‰∫ã‰ª∂
  bindModalEvents() {
    const passwordModal = document.getElementById('passwordModal');
    const closeBtns = document.querySelectorAll('.close');
    const passwordForm = document.getElementById('passwordForm');

    closeBtns.forEach(btn => {
      btn.addEventListener('click', () => this.closeModals());
    });

    if (passwordModal) {
      passwordModal.addEventListener('click', (e) => {
        if (e.target === passwordModal) this.closeModals();
      });
    }

    if (passwordForm) {
      passwordForm.addEventListener('submit', (e) => this.handlePasswordChange(e));
    }
  }

  // ÁªëÂÆöËÆæÁΩÆ‰∫ã‰ª∂
  bindSettingsEvents() {
    const settingInputs = document.querySelectorAll('#settings input, #settings select');
    settingInputs.forEach(input => {
      input.addEventListener('change', () => {
        this.markSettingsChanged();
      });
    });
  }

  // ÂàáÊç¢Ê†áÁ≠æ
  switchTab(tabName) {
    document.querySelectorAll('.menu-item').forEach(item => {
      item.classList.toggle('active', item.dataset.tab === tabName);
    });

    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.toggle('active', content.id === tabName);
    });

    this.currentTab = tabName;
    this.loadTabData(tabName);
  }

  // Âä†ËΩΩÊ†áÁ≠æÊï∞ÊçÆ
  async loadTabData(tabName) {
    switch (tabName) {
      case 'overview':
        await this.loadOverviewData();
        break;
      case 'favorites':
        await this.loadFavoritesData();
        break;
      case 'history':
        await this.loadHistoryData();
        break;
      case 'settings':
        await this.loadSettingsData();
        break;
      case 'stats':
        await this.loadStatsData();
        break;
    }
  }

  // Âä†ËΩΩÊ¶ÇËßàÊï∞ÊçÆ
  async loadOverviewData() {
    try {
      const [searchStats] = await Promise.allSettled([
        apiService.getSearchStats()
      ]);
      
      const stats = searchStats.status === 'fulfilled' ? searchStats.value : {
        total: this.searchHistory.length,
        today: 0,
        thisWeek: 0,
        topQueries: []
      };
      
      // Êõ¥Êñ∞UI
      const totalSearchesEl = document.getElementById('totalSearches');
      const totalFavoritesEl = document.getElementById('totalFavorites');
      const activeDaysEl = document.getElementById('activeDays');
      const userLevelEl = document.getElementById('userLevel');

      if (totalSearchesEl) totalSearchesEl.textContent = stats.total || 0;
      if (totalFavoritesEl) totalFavoritesEl.textContent = this.favorites.length;
      
      const activeDays = this.calculateActiveDays();
      if (activeDaysEl) activeDaysEl.textContent = activeDays;
      
      const level = this.calculateUserLevel();
      if (userLevelEl) userLevelEl.textContent = level;

      await this.loadRecentActivity();

    } catch (error) {
      console.error('Âä†ËΩΩÊ¶ÇËßàÊï∞ÊçÆÂ§±Ë¥•:', error);
      this.loadOverviewDataFromLocal();
    }
  }

  // Âä†ËΩΩËÆæÁΩÆÊï∞ÊçÆ
  async loadSettingsData() {
    try {
      const settings = await apiService.getUserSettings();
      
      const autoSyncEl = document.getElementById('autoSync');
      const enableCacheEl = document.getElementById('enableCache');
      const themeModeEl = document.getElementById('themeMode');
      const maxFavoritesEl = document.getElementById('maxFavorites');

      if (autoSyncEl) autoSyncEl.checked = settings.autoSync !== false;
      if (enableCacheEl) enableCacheEl.checked = settings.cacheResults !== false;
      if (themeModeEl) themeModeEl.value = settings.theme || 'auto';
      if (maxFavoritesEl) maxFavoritesEl.value = settings.maxFavoritesPerUser ?? 500;

    } catch (error) {
      console.error('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•:', error);
      showToast('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•', 'error');
    }
  }

  // ÂêåÊ≠•Êî∂Ëóè - Áõ¥Êé•‰∏éAPI‰∫§‰∫í
  async syncFavorites() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    try {
      showLoading(true);
      await apiService.syncFavorites(this.favorites);
      showToast('Êî∂ËóèÂ§πÂêåÊ≠•ÊàêÂäü', 'success');
    } catch (error) {
      console.error('ÂêåÊ≠•Êî∂ËóèÂ§±Ë¥•:', error);
      showToast('ÂêåÊ≠•Â§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  // ÁßªÈô§Êî∂Ëóè
  async removeFavorite(favoriteId) {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™Êî∂ËóèÂêóÔºü')) return;

    const index = this.favorites.findIndex(f => f.id === favoriteId);
    if (index >= 0) {
      try {
        showLoading(true);
        
        // ‰ªéÊï∞ÁªÑ‰∏≠ÁßªÈô§
        this.favorites.splice(index, 1);
        
        // ÂêåÊ≠•Âà∞‰∫ëÁ´Ø
        await apiService.syncFavorites(this.favorites);
        
        // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ‰ª•Á°Æ‰øù‰∏ÄËá¥ÊÄß
        await this.loadFavoritesData();
        showToast('Êî∂ËóèÂ∑≤Âà†Èô§', 'success');
        
      } catch (error) {
        console.error('Âà†Èô§Êî∂ËóèÂ§±Ë¥•:', error);
        showToast('Âà†Èô§Â§±Ë¥•: ' + error.message, 'error');
        
        // ÈáçÊñ∞Âä†ËΩΩ‰∫ëÁ´ØÊï∞ÊçÆ‰ª•ÊÅ¢Â§çÁä∂ÊÄÅ
        await this.loadCloudData();
      } finally {
        showLoading(false);
      }
    }
  }

  // Ê∏ÖÁ©∫ÊêúÁ¥¢ÂéÜÂè≤
  async clearAllHistory() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    if (!confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÊêúÁ¥¢ÂéÜÂè≤ÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ')) return;

    try {
      showLoading(true);
      
      // ‰ΩøÁî®APIÊ∏ÖÁ©∫
      await apiService.clearAllSearchHistory();
      
      // Ê∏ÖÁ©∫Êú¨Âú∞Êï∞ÊçÆ
      this.searchHistory = [];
      
      // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
      await this.loadHistoryData();
      
      showToast('ÊêúÁ¥¢ÂéÜÂè≤Â∑≤Ê∏ÖÁ©∫', 'success');
    } catch (error) {
      console.error('Ê∏ÖÁ©∫ÊêúÁ¥¢ÂéÜÂè≤Â§±Ë¥•:', error);
      showToast('Ê∏ÖÁ©∫Â§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  // Ê∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆ
  async clearAllData() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    if (!confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºåÂª∫ËÆÆÂÖàÂØºÂá∫Êï∞ÊçÆÂ§á‰ªΩ„ÄÇ')) return;
    if (!confirm('ÂÜçÊ¨°Á°ÆËÆ§ÔºöËøôÂ∞ÜÊ∏ÖÁ©∫ÊÇ®ÁöÑÊâÄÊúâÊî∂ËóèÂíåÊêúÁ¥¢ÂéÜÂè≤ÔºÅ')) return;

    try {
      showLoading(true);
      
      // Ê∏ÖÁ©∫‰∫ëÁ´ØÊï∞ÊçÆ
      await Promise.all([
        apiService.clearAllSearchHistory(),
        apiService.syncFavorites([]) // ‰º†Á©∫Êï∞ÁªÑÊ∏ÖÁ©∫Êî∂Ëóè
      ]);
      
      // Ê∏ÖÁ©∫Êú¨Âú∞Êï∞ÊçÆ
      this.favorites = [];
      this.searchHistory = [];
      
      // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
      await this.loadCloudData();
      
      showToast('ÊâÄÊúâÊï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫', 'success');
    } catch (error) {
      console.error('Ê∏ÖÁ©∫Êï∞ÊçÆÂ§±Ë¥•:', error);
      showToast('Ê∏ÖÁ©∫Â§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  // ‰øùÂ≠òËÆæÁΩÆ
  async saveSettings() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    try {
      showLoading(true);
      const ui = this.collectSettings();
      const payload = {
        theme: ui.themeMode,
        autoSync: !!ui.autoSync,
        cacheResults: !!ui.enableCache,
        maxFavoritesPerUser: parseInt(ui.maxFavorites, 10),
        maxHistoryPerUser: ui.historyRetention === '-1' ? 999999 : parseInt(ui.historyRetention, 10)
      };
      
      await apiService.updateUserSettings(payload);
      showToast('ËÆæÁΩÆ‰øùÂ≠òÊàêÂäü', 'success');
      this.markSettingsSaved();
    } catch (error) {
      console.error('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
      showToast('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  // Êï∞ÊçÆÂêåÊ≠•
  async syncAllData() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    try {
      showLoading(true);
      showToast('Ê≠£Âú®ÂêåÊ≠•Êï∞ÊçÆ...', 'info');
      
      // ÂêåÊ≠•Êî∂ËóèÂ§πÂà∞‰∫ëÁ´Ø
      await apiService.syncFavorites(this.favorites);
      
      // ÈáçÊñ∞‰ªé‰∫ëÁ´ØÂä†ËΩΩÊï∞ÊçÆ‰ª•Á°Æ‰øù‰∏ÄËá¥ÊÄß
      await this.loadCloudData();
      
      showToast('Êï∞ÊçÆÂêåÊ≠•ÊàêÂäü', 'success');
    } catch (error) {
      console.error('Êï∞ÊçÆÂêåÊ≠•Â§±Ë¥•:', error);
      showToast('ÂêåÊ≠•Â§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  // Êï∞ÊçÆÂØºÂá∫
  async exportData() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    try {
      // ‰ªé‰∫ëÁ´ØÈáçÊñ∞Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
      const [favorites, history, settings] = await Promise.all([
        apiService.getFavorites(),
        apiService.getSearchHistory(),
        apiService.getUserSettings()
      ]);

      const data = {
        favorites: favorites || this.favorites,
        searchHistory: history || this.searchHistory,
        settings: settings || this.collectSettings(),
        exportTime: new Date().toISOString(),
        version: window.API_CONFIG?.APP_VERSION || '1.0.0'
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], {
        type: 'application/json'
      });

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `magnet-search-data-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      showToast('Êï∞ÊçÆÂØºÂá∫ÊàêÂäü', 'success');
    } catch (error) {
      console.error('ÂØºÂá∫Êï∞ÊçÆÂ§±Ë¥•:', error);
      showToast('ÂØºÂá∫Â§±Ë¥•: ' + error.message, 'error');
    }
  }

  // Êî∂ËóèÂ§πÂØºÂá∫
  async exportFavorites() {
    if (!this.currentUser) {
      showToast('Áî®Êà∑Êú™ÁôªÂΩï', 'error');
      return;
    }

    try {
      // ‰ªé‰∫ëÁ´ØËé∑ÂèñÊúÄÊñ∞Êî∂ËóèÊï∞ÊçÆ
      const favorites = await apiService.getFavorites();
      
      const data = {
        favorites: favorites || this.favorites,
        exportTime: new Date().toISOString(),
        version: window.API_CONFIG?.APP_VERSION || '1.0.0'
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], {
        type: 'application/json'
      });

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `favorites-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      showToast('Êî∂ËóèÂØºÂá∫ÊàêÂäü', 'success');
    } catch (error) {
      console.error('ÂØºÂá∫Êî∂ËóèÂ§±Ë¥•:', error);
      showToast('ÂØºÂá∫Â§±Ë¥•: ' + error.message, 'error');
    }
  }

  // ÈáçÁΩÆËÆæÁΩÆ
  resetSettings() {
    if (!confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆÊâÄÊúâËÆæÁΩÆ‰∏∫ÈªòËÆ§ÂÄºÂêóÔºü')) return;

    // ÈáçÁΩÆ‰∏∫ÈªòËÆ§ËÆæÁΩÆ
    const defaultSettings = {
      autoSync: true,
      enableCache: true,
      themeMode: 'auto',
      historyRetention: '90',
      maxFavorites: '500',
      allowAnalytics: true,
      searchSuggestions: true
    };

    Object.entries(defaultSettings).forEach(([key, value]) => {
      const element = document.getElementById(key);
      if (element) {
        if (element.type === 'checkbox') {
          element.checked = value;
        } else {
          element.value = value;
        }
      }
    });

    this.markSettingsChanged();
    showToast('ËÆæÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄºÔºåËØ∑ÁÇπÂáª‰øùÂ≠ò', 'success');
  }

  // ÂàùÂßãÂåñ‰∏ªÈ¢ò
  initTheme() {
    // Âè™Ë∞ÉÁî®‰∏ªÈ¢òÁÆ°ÁêÜÂô®ÁöÑÂ∫îÁî®ÊñπÊ≥ïÔºå‰∏çÁªëÂÆö‰∫ã‰ª∂
    themeManager.applyTheme();
  }

  // ÂàáÊç¢‰∏ªÈ¢ò
  toggleTheme() {
    // Áõ¥Êé•Ë∞ÉÁî®ÂÖ®Â±Ä‰∏ªÈ¢òÁÆ°ÁêÜÂô®Ôºå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñÁªëÂÆö‰∫ã‰ª∂
    themeManager.toggleTheme();
  }

  // ÈÄÄÂá∫ÁôªÂΩï
  async logout() {
    if (confirm('Á°ÆÂÆöË¶ÅÈÄÄÂá∫ÁôªÂΩïÂêóÔºü')) {
      try {
        await apiService.logout();
        localStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.AUTH_TOKEN);
        showToast('Â∑≤ÈÄÄÂá∫ÁôªÂΩï', 'success');
        setTimeout(() => {
          window.location.href = 'index.html';
        }, 1000);
      } catch (error) {
        console.error('ÈÄÄÂá∫ÁôªÂΩïÂ§±Ë¥•:', error);
        localStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.AUTH_TOKEN);
        window.location.href = 'index.html';
      }
    }
  }

  // ‰ª•‰∏ãÊñπÊ≥ï‰øùÊåÅ‰∏çÂèòÔºå‰ΩÜÁßªÈô§‰ªª‰ΩïÊú¨Âú∞Â≠òÂÇ®ÂºïÁî®
  loadOverviewDataFromLocal() {
    const totalSearchesEl = document.getElementById('totalSearches');
    const totalFavoritesEl = document.getElementById('totalFavorites');
    const activeDaysEl = document.getElementById('activeDays');
    const userLevelEl = document.getElementById('userLevel');

    if (totalSearchesEl) totalSearchesEl.textContent = this.searchHistory.length;
    if (totalFavoritesEl) totalFavoritesEl.textContent = this.favorites.length;
    if (activeDaysEl) activeDaysEl.textContent = this.calculateActiveDays();
    if (userLevelEl) userLevelEl.textContent = this.calculateUserLevel();
  }

  async loadFavoritesData() {
    const favoritesList = document.getElementById('favoritesList');
    if (!favoritesList) return;

    if (this.favorites.length === 0) {
      favoritesList.innerHTML = `
        <div class="empty-state">
          <span style="font-size: 3rem;">üìå</span>
          <p>ÊöÇÊó†Êî∂Ëóè</p>
          <a href="index.html" class="btn-primary">ÂéªÊêúÁ¥¢</a>
        </div>
      `;
      return;
    }

    favoritesList.innerHTML = this.favorites.map(fav => `
      <div class="favorite-item" data-id="${fav.id}">
        <div class="favorite-content">
          <div class="favorite-title">
            <span class="favorite-icon">${fav.icon}</span>
            <span class="favorite-name">${escapeHtml(fav.title)}</span>
          </div>
          <div class="favorite-subtitle">${escapeHtml(fav.subtitle)}</div>
          <div class="favorite-url">${escapeHtml(fav.url)}</div>
          <div class="favorite-meta">
            <span>ÂÖ≥ÈîÆËØç: ${escapeHtml(fav.keyword)}</span>
            <span>Ê∑ªÂä†Êó∂Èó¥: ${formatRelativeTime(fav.addedAt)}</span>
          </div>
        </div>
        <div class="favorite-actions">
          <button class="action-btn visit-btn" onclick="window.open('${escapeHtml(fav.url)}', '_blank')">
            ËÆøÈóÆ
          </button>
          <button class="action-btn remove-btn" onclick="app.removeFavorite('${fav.id}')">
            Âà†Èô§
          </button>
        </div>
      </div>
    `).join('');
  }

  async loadHistoryData() {
    const historyList = document.getElementById('historyList');
    const historyCount = document.getElementById('historyCount');
    const uniqueKeywords = document.getElementById('uniqueKeywords');
    const avgPerDay = document.getElementById('avgPerDay');

    if (historyCount) historyCount.textContent = this.searchHistory.length;
    
    const unique = new Set(this.searchHistory.map(h => h.keyword)).size;
    if (uniqueKeywords) uniqueKeywords.textContent = unique;

    const daysActive = this.calculateActiveDays() || 1;
    if (avgPerDay) avgPerDay.textContent = Math.round(this.searchHistory.length / daysActive);

    if (!historyList) return;

    if (this.searchHistory.length === 0) {
      historyList.innerHTML = `
        <div class="empty-state">
          <span style="font-size: 3rem;">üïê</span>
          <p>ÊöÇÊó†ÊêúÁ¥¢ÂéÜÂè≤</p>
        </div>
      `;
      return;
    }

    historyList.innerHTML = this.searchHistory.slice(0, 50).map(item => `
      <div class="history-item">
        <div class="history-content">
          <div class="history-keyword">${escapeHtml(item.keyword)}</div>
          <div class="history-time">${formatRelativeTime(item.timestamp)}</div>
        </div>
        <div class="history-actions">
          <button class="action-btn" onclick="window.location.href='./index.html?q=${encodeURIComponent(item.keyword)}'">
            ÈáçÊñ∞ÊêúÁ¥¢
          </button>
        </div>
      </div>
    `).join('');
  }

  async loadStatsData() {
    console.log('Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ');
  }

  changePassword() {
    const modal = document.getElementById('passwordModal');
    if (modal) {
      modal.style.display = 'block';
      setTimeout(() => {
        const currentPassword = document.getElementById('currentPassword');
        if (currentPassword) currentPassword.focus();
      }, 100);
    }
  }

  async handlePasswordChange(event) {
    event.preventDefault();
    
    const currentPassword = document.getElementById('currentPassword').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmNewPassword').value;

    if (!currentPassword || !newPassword || !confirmPassword) {
      showToast('ËØ∑Â°´ÂÜôÊâÄÊúâÂ≠óÊÆµ', 'error');
      return;
    }

    if (newPassword !== confirmPassword) {
      showToast('Êñ∞ÂØÜÁ†ÅÁ°ÆËÆ§‰∏ç‰∏ÄËá¥', 'error');
      return;
    }

    if (newPassword.length < 6) {
      showToast('Êñ∞ÂØÜÁ†ÅËá≥Â∞ë6‰∏™Â≠óÁ¨¶', 'error');
      return;
    }

    try {
      showLoading(true);
      
      const response = await apiService.changePassword(currentPassword, newPassword);
      
      if (response.success) {
        showToast('ÂØÜÁ†Å‰øÆÊîπÊàêÂäü', 'success');
        this.closeModals();
        document.getElementById('passwordForm').reset();
      } else {
        throw new Error(response.message || 'ÂØÜÁ†Å‰øÆÊîπÂ§±Ë¥•');
      }
    } catch (error) {
      showToast('ÂØÜÁ†Å‰øÆÊîπÂ§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  collectSettings() {
    const settings = {};
    const settingInputs = document.querySelectorAll('#settings input, #settings select');
    
    settingInputs.forEach(input => {
      if (input.type === 'checkbox') {
        settings[input.id] = input.checked;
      } else {
        settings[input.id] = input.value;
      }
    });
    
    return settings;
  }

  markSettingsChanged() {
    const saveBtn = document.querySelector('#settings .btn-primary');
    if (saveBtn) {
      saveBtn.textContent = '‰øùÂ≠òËÆæÁΩÆ*';
      saveBtn.classList.add('changed');
    }
  }

  markSettingsSaved() {
    const saveBtn = document.querySelector('#settings .btn-primary');
    if (saveBtn) {
      saveBtn.textContent = '‰øùÂ≠òËÆæÁΩÆ';
      saveBtn.classList.remove('changed');
    }
  }

  calculateActiveDays() {
    if (this.searchHistory.length === 0) return 0;
    
    const dates = new Set(
      this.searchHistory.map(h => new Date(h.timestamp).toDateString())
    );
    return dates.size;
  }

  calculateUserLevel() {
    const totalActions = this.searchHistory.length + this.favorites.length;
    
    if (totalActions < 10) return 'Êñ∞Êâã';
    if (totalActions < 50) return 'ÁÜüÁªÉ';
    if (totalActions < 200) return '‰∏ì‰∏ö';
    if (totalActions < 500) return '‰∏ìÂÆ∂';
    return 'Â§ßÂ∏à';
  }

  async loadRecentActivity() {
    const activityList = document.getElementById('activityList');
    if (!activityList) return;

    const activities = [
      ...this.searchHistory.slice(0, 5).map(h => ({
        type: 'search',
        content: `ÊêúÁ¥¢‰∫Ü "${h.keyword}"`,
        time: h.timestamp,
        icon: 'üîç'
      })),
      ...this.favorites.slice(0, 5).map(f => ({
        type: 'favorite',
        content: `Êî∂Ëóè‰∫Ü "${f.title}"`,
        time: new Date(f.addedAt).getTime(),
        icon: '‚≠ê'
      }))
    ].sort((a, b) => b.time - a.time).slice(0, 10);

    if (activities.length === 0) {
      activityList.innerHTML = '<p class="empty-state">ÊöÇÊó†Ê¥ªÂä®ËÆ∞ÂΩï</p>';
      return;
    }

    activityList.innerHTML = activities.map(activity => `
      <div class="activity-item">
        <span class="activity-icon">${activity.icon}</span>
        <div class="activity-content">
          <div class="activity-text">${escapeHtml(activity.content)}</div>
          <div class="activity-time">${formatRelativeTime(activity.time)}</div>
        </div>
      </div>
    `).join('');
  }

  escapeHtml(text) {
    return escapeHtml(text);
  }

  updateUserUI() {
    const username = document.getElementById('username');
    if (username && this.currentUser) {
      username.textContent = this.currentUser.username;
    }
  }

  closeModals() {
    document.querySelectorAll('.modal').forEach(modal => {
      modal.style.display = 'none';
    });
  }

  async deleteAccount() {
    const confirmText = 'ÊàëÁ°ÆÂÆöË¶ÅÂà†Èô§Ë¥¶Êà∑';
    const userInput = prompt(`Âà†Èô§Ë¥¶Êà∑Â∞ÜÊó†Ê≥ïÊÅ¢Â§çÔºåËØ∑ËæìÂÖ•"${confirmText}"Á°ÆËÆ§Ôºö`);
    
    if (userInput !== confirmText) {
      showToast('Á°ÆËÆ§ÊñáÊú¨‰∏çÂåπÈÖçÔºåÂèñÊ∂àÂà†Èô§', 'info');
      return;
    }

    try {
      showLoading(true);
      
      const response = await apiService.deleteAccount();
      
      if (response.success) {
        showToast('Ë¥¶Êà∑Â∑≤Âà†Èô§', 'success');
        
        setTimeout(() => {
          window.location.href = 'index.html';
        }, 2000);
      } else {
        throw new Error(response.message || 'Âà†Èô§Ë¥¶Êà∑Â§±Ë¥•');
      }
    } catch (error) {
      console.error('Âà†Èô§Ë¥¶Êà∑Â§±Ë¥•:', error);
      showToast('Âà†Èô§Â§±Ë¥•: ' + error.message, 'error');
    } finally {
      showLoading(false);
    }
  }

  searchFavorites() {
    const searchTerm = document.getElementById('favoritesSearch')?.value.toLowerCase() || '';
    const sortBy = document.getElementById('favoritesSort')?.value || 'date-desc';
    
    let filteredFavorites = this.favorites;

    if (searchTerm) {
      filteredFavorites = this.favorites.filter(fav => 
        fav.title.toLowerCase().includes(searchTerm) ||
        fav.subtitle.toLowerCase().includes(searchTerm) ||
        fav.keyword.toLowerCase().includes(searchTerm)
      );
    }

    switch (sortBy) {
      case 'date-desc':
        filteredFavorites.sort((a, b) => new Date(b.addedAt) - new Date(a.addedAt));
        break;
      case 'date-asc':
        filteredFavorites.sort((a, b) => new Date(a.addedAt) - new Date(b.addedAt));
        break;
      case 'name-asc':
        filteredFavorites.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'name-desc':
        filteredFavorites.sort((a, b) => b.title.localeCompare(a.title));
        break;
    }

    this.renderFilteredFavorites(filteredFavorites);
  }

  renderFilteredFavorites(favorites) {
    const favoritesList = document.getElementById('favoritesList');
    if (!favoritesList) return;

    if (favorites.length === 0) {
      favoritesList.innerHTML = `
        <div class="empty-state">
          <span style="font-size: 3rem;">üîç</span>
          <p>Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑÊî∂Ëóè</p>
        </div>
      `;
      return;
    }

    favoritesList.innerHTML = favorites.map(fav => `
      <div class="favorite-item" data-id="${fav.id}">
        <div class="favorite-content">
          <div class="favorite-title">
            <span class="favorite-icon">${fav.icon}</span>
            <span class="favorite-name">${escapeHtml(fav.title)}</span>
          </div>
          <div class="favorite-subtitle">${escapeHtml(fav.subtitle)}</div>
          <div class="favorite-url">${escapeHtml(fav.url)}</div>
          <div class="favorite-meta">
            <span>ÂÖ≥ÈîÆËØç: ${escapeHtml(fav.keyword)}</span>
            <span>Ê∑ªÂä†Êó∂Èó¥: ${formatRelativeTime(fav.addedAt)}</span>
          </div>
        </div>
        <div class="favorite-actions">
          <button class="action-btn visit-btn" onclick="window.open('${escapeHtml(fav.url)}', '_blank')">
            ËÆøÈóÆ
          </button>
          <button class="action-btn remove-btn" onclick="app.removeFavorite('${fav.id}')">
            Âà†Èô§
          </button>
        </div>
      </div>
    `).join('');
  }
}

export default DashboardApp;