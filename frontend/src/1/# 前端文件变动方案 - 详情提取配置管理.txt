# 前端文件变动方案 - 详情提取配置管理

## 📋 变动概览

基于后端详情提取配置管理的改动，前端需要新增配置管理功能，同时更新现有的详情提取相关组件。

## 🆕 新增文件

### 1. 核心配置层
```
src/core/
├── detail-config.js                    # 详情提取配置常量和默认值
```

### 2. 服务层
```
src/services/
├── detail-config-api.js                # 详情提取配置API服务
```

### 3. 组件层
```
src/components/
├── detail-config.js                     # 详情配置组件
```

### 4. 页面管理器
```
src/pages/dashboard/
├── detail-config-manager.js            # 详情配置页面管理器
```

### 5. 样式文件
```
css/components/
├── detail-config.css                   # 详情配置组件样式

css/pages/dashboard/
├── detail-config-management.css        # 详情配置管理页面样式
```

## 🔄 需要修改的现有文件

### 1. 核心配置文件
**src/core/constants.js**
- 移除硬编码的详情提取配置
- 只保留系统级别的常量
- 添加配置API端点定义

### 2. 服务层文件
**src/services/detail-api.js**
- 集成用户配置获取逻辑
- 更新API调用参数，支持动态配置
- 添加配置验证功能

### 3. 组件层文件
**src/components/detail-card.js**
- 根据用户配置动态显示/隐藏内容
- 支持紧凑模式切换
- 添加配置相关的交互按钮

**src/components/search.js**
- 集成用户配置，影响搜索结果显示
- 支持自动提取功能控制
- 添加快速配置入口

### 4. 页面管理器
**src/pages/dashboard/dashboard-app.js**
- 添加详情配置管理入口
- 更新导航菜单
- 集成配置状态显示

**src/pages/dashboard/settings-manager.js**
- 添加详情提取设置部分
- 集成快速配置切换
- 添加配置重置功能

### 5. 主页面文件
**dashboard.html**
- 添加详情配置管理页面HTML结构
- 更新导航菜单项
- 添加配置相关的模态框

## 📁 详细文件内容规划

### 新增文件内容规划

#### src/core/detail-config.js
```javascript
// 详情提取配置常量和默认值
export const DETAIL_CONFIG_ENDPOINTS = {
  GET_CONFIG: '/api/detail/config',
  UPDATE_CONFIG: '/api/detail/config',
  RESET_CONFIG: '/api/detail/config/reset',
  APPLY_PRESET: '/api/detail/config/preset'
};

export const DETAIL_CONFIG_PRESETS = {
  CONSERVATIVE: 'conservative',
  BALANCED: 'balanced',
  AGGRESSIVE: 'aggressive',
  QUALITY: 'quality'
};

export const CONFIG_VALIDATION_RULES = {
  // 从后端同步的验证规则
};
```

#### src/services/detail-config-api.js
```javascript
// 详情提取配置API服务
import { api } from './api.js';
import { DETAIL_CONFIG_ENDPOINTS } from '../core/detail-config.js';

export class DetailConfigAPI {
  // 获取用户配置
  static async getUserConfig() { }
  
  // 更新用户配置
  static async updateUserConfig(config, validateOnly = false) { }
  
  // 重置配置
  static async resetConfig() { }
  
  // 应用预设
  static async applyPreset(preset) { }
  
  // 验证配置
  static async validateConfig(config) { }
}
```

#### src/components/detail-config.js


### 修改现有文件的具体内容

#### src/core/constants.js (修改)
```javascript
// 移除详情提取相关的配置常量
// 只保留系统级别的常量

// 新增配置相关常量
export const API_ENDPOINTS = {
  // ... 现有端点
  DETAIL_CONFIG: '/api/detail/config',
  DETAIL_PRESETS: '/api/detail/config/preset'
};
```

#### src/services/detail-api.js (修改)
```javascript
// 添加配置感知的详情提取
export class DetailAPI {
  // 新增：获取用户配置并应用到API调用
  static async getConfigAwareOptions(overrides = {}) {
    const userConfig = await this.getUserConfig();
    return this.mergeConfigWithOverrides(userConfig, overrides);
  }

  // 修改现有方法，支持动态配置
  static async extractSingleDetail(searchResult, options = {}) {
    const configOptions = await this.getConfigAwareOptions(options);
    return api.post('/api/detail/extract-single', {
      searchResult,
      options: configOptions
    });
  }
}
```

#### src/components/detail-card.js (修改)
```javascript
// 添加配置驱动的显示逻辑
export class DetailCard {
  constructor(data, config = null) {
    this.data = data;
    this.config = config || this.getDefaultConfig();
  }

  render() {
    // 根据配置动态显示内容
    const html = `
      <div class="detail-card ${this.config.compactMode ? 'compact' : ''}">
        ${this.config.showScreenshots ? this.renderScreenshots() : ''}
        ${this.config.showDownloadLinks ? this.renderDownloadLinks() : ''}
        ${this.config.showMagnetLinks ? this.renderMagnetLinks() : ''}
        ${this.config.showActressInfo ? this.renderActresses() : ''}
      </div>
    `;
    return html;
  }
}
```

## 🎨 样式文件规划

### css/components/detail-config.css
```css
/* 详情配置组件样式 */
.detail-config-manager { }
.config-presets { }
.config-form-group { }
.config-validation-error { }
.config-preset-card { }
```

### css/pages/dashboard/detail-config-management.css
```css
/* 详情配置管理页面样式 */
.detail-config-page { }
.config-sidebar { }
.config-main-content { }
.config-preview { }
```

## 🔗 文件依赖关系

```
dashboard.html
├── src/pages/dashboard/dashboard-app.js
│   ├── src/pages/dashboard/detail-config-manager.js
│   │   ├── src/components/detail-config.js
│   │   │   └── src/services/detail-config-api.js
│   │   └── src/core/detail-config.js
│   └── src/services/detail-api.js (修改)
└── css/pages/dashboard/detail-config-management.css
```

## 📝 实施步骤

### Phase 1: 核心服务层
1. 创建 `src/core/detail-config.js`
2. 创建 `src/services/detail-config-api.js`
3. 修改 `src/core/constants.js`

### Phase 2: 组件层
1. 创建 `src/components/detail-config.js` 组件
2. 修改 `src/components/detail-card.js`
3. 修改 `src/components/search.js`

### Phase 3: 页面层
1. 创建 `src/pages/dashboard/detail-config-manager.js`
2. 修改 `src/pages/dashboard/dashboard-app.js`
3. 修改 `src/pages/dashboard/settings-manager.js`

### Phase 4: 样式和界面
1. 创建配置相关CSS文件
2. 修改 `dashboard.html`
3. 更新导航和菜单

### Phase 5: 集成和测试
1. 更新 `src/services/detail-api.js`
2. 测试配置功能
3. 优化用户体验

## 🎯 关键集成点

1. **配置加载时机**: 用户登录后立即加载配置
2. **配置缓存策略**: 在sessionStorage中缓存配置，避免重复请求
3. **配置验证**: 前端实时验证，后端最终验证
4. **预设切换**: 支持快速预设切换，提供预览功能
5. **配置同步**: 配置更改后实时更新所有相关组件

这个方案保持了你现有的架构风格，遵循了分层设计原则，并且提供了良好的可维护性和扩展性。


基于你的后端详情提取配置管理功能，我需要以下前端文件来进行准确的适配调整：

## 🎯 核心必需文件

### 1. 核心配置层
```
src/core/constants.js          # 了解现有常量定义模式
src/core/config.js            # 了解现有配置管理架构
```

### 2. 服务层（关键）
```
src/services/api.js           # 基础API服务模式和错误处理
src/services/detail-api.js    # 现有详情提取API，需要集成用户配置
```

### 3. 组件层（核心）
```
src/components/detail-card.js  # 详情卡片组件，需要根据配置控制显示内容
src/components/search.js      # 搜索组件，需要集成自动提取等配置功能
```

### 4. 页面管理层
```
src/pages/dashboard/dashboard-app.js    # 仪表板主应用，需要添加配置管理入口
src/pages/dashboard/settings-manager.js # 设置管理器，可能需要集成快速配置
```

### 5. 页面结构
```
dashboard.html                # 仪表板页面HTML结构，需要添加配置管理页面
```

## 🎨 样式参考文件

### 1. 样式系统
```
css/core/variables.css        # CSS变量和主题色彩系统
css/core/base.css            # 基础样式模式
```

### 2. 组件样式参考
```
css/components/buttons.css    # 按钮样式模式
css/components/modal.css      # 模态框样式（配置弹窗需要）
css/pages/dashboard/dashboard.css # 仪表板样式模式
```

## 🔧 工具函数参考
```
src/utils/helpers.js          # 通用帮助函数模式
src/utils/validation.js       # 数据验证工具模式（配置验证需要）
```

## 📋 为什么需要这些文件？

### 1. **API集成模式** (`api.js`, `detail-api.js`)
- 了解你的API调用模式、错误处理方式
- 集成用户配置到现有详情提取流程
- 保持一致的服务层架构

### 2. **组件适配** (`detail-card.js`, `search.js`)
- 了解现有组件的结构和渲染方式
- 根据用户配置动态控制显示内容
- 保持组件API的一致性

### 3. **页面集成** (`dashboard-app.js`, `settings-manager.js`)
- 了解页面管理器的架构模式
- 添加配置管理入口和导航
- 保持页面切换和状态管理的一致性

### 4. **样式一致性** (CSS文件)
- 遵循现有的设计系统
- 保持视觉和交互的一致性
- 了解响应式布局模式

## 🚀 适配流程

有了这些文件，我将能够：

1. **Phase 1**: 创建配置服务层，与你的后端API完美对接
2. **Phase 2**: 修改现有组件，集成配置驱动的显示逻辑  
3. **Phase 3**: 创建配置管理界面，保持你的设计风格
4. **Phase 4**: 集成到仪表板，保持导航和页面管理的一致性

这样我就能确保新增的配置管理功能与你现有的前端架构完美融合，保持代码风格和用户体验的一致性。