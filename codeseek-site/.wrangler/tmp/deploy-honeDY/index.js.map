{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "D:\\\u8BB8\u4E16\u5B89\\\u78C1\u529B\u5FEB\u641C\\codeseek-site\\.wrangler\\tmp\\deploy-honeDY",
  "sourcesContent": ["// Enhanced Proxy Worker with flexible origin validation\n// \u7248\u672C: v2.1.3 - \u4FEE\u590DCORS\u9A8C\u8BC1\u903B\u8F91\uFF0C\u652F\u6301\u66F4\u7075\u6D3B\u7684\u8BBF\u95EE\u65B9\u5F0F\n\n/**\n * \u9A8C\u8BC1\u8BF7\u6C42\u6765\u6E90\u662F\u5426\u5408\u6CD5\uFF08\u4FEE\u590D\u7248\uFF09\n */\nfunction isValidOrigin(request, allowedOrigins) {\n  if (!allowedOrigins) return true; // \u5982\u679C\u6CA1\u6709\u914D\u7F6E\u9650\u5236\uFF0C\u5141\u8BB8\u6240\u6709\u8BBF\u95EE\n  \n  const origin = request.headers.get('origin');\n  const referer = request.headers.get('referer');\n  \n  // \u8C03\u8BD5\u6A21\u5F0F\u4E0B\u8BB0\u5F55origin\u4FE1\u606F\n  const DEBUG = request.env?.DEBUG === 'true';\n  if (DEBUG) {\n    console.log('Origin validation:', {\n      origin,\n      referer,\n      userAgent: request.headers.get('user-agent'),\n      method: request.method\n    });\n  }\n  \n  // \u5982\u679C\u6CA1\u6709origin\u5934\uFF0C\u68C0\u67E5\u662F\u5426\u4E3A\u76F4\u63A5\u8BBF\u95EE\n  if (!origin || origin === 'null') {\n    // \u5141\u8BB8\u76F4\u63A5\u6D4F\u89C8\u5668\u8BBF\u95EE\n    const userAgent = request.headers.get('user-agent') || '';\n    const isDirectBrowserAccess = userAgent.includes('Mozilla');\n    \n    if (isDirectBrowserAccess) {\n      if (DEBUG) console.log('Allowing direct browser access without origin header');\n      return true;\n    }\n    \n    // \u5982\u679C\u6709referer\uFF0C\u5C1D\u8BD5\u4ECEreferer\u63D0\u53D6origin\n    if (referer) {\n      try {\n        const refererUrl = new URL(referer);\n        const refererOrigin = `${refererUrl.protocol}//${refererUrl.hostname}`;\n        return checkOriginAgainstAllowed(refererOrigin, allowedOrigins, DEBUG);\n      } catch (error) {\n        if (DEBUG) console.log('Failed to extract origin from referer:', error.message);\n      }\n    }\n    \n    if (DEBUG) console.log('No valid origin found, allowing for compatibility');\n    return true; // \u4E3A\u4E86\u517C\u5BB9\u6027\uFF0C\u5141\u8BB8\u8BBF\u95EE\n  }\n  \n  return checkOriginAgainstAllowed(origin, allowedOrigins, DEBUG);\n}\n\n/**\n * \u68C0\u67E5origin\u662F\u5426\u5728\u5141\u8BB8\u5217\u8868\u4E2D\n */\nfunction checkOriginAgainstAllowed(origin, allowedOrigins, DEBUG = false) {\n  const allowedDomains = allowedOrigins.split(',').map(domain => domain.trim());\n  \n  // \u5C1D\u8BD5\u89E3\u6790origin URL\n  let originUrl;\n  try {\n    originUrl = new URL(origin);\n  } catch (error) {\n    if (DEBUG) console.log('Invalid origin URL:', origin, error.message);\n    return false;\n  }\n  \n  // \u68C0\u67E5\u662F\u5426\u5339\u914D\u5141\u8BB8\u7684\u57DF\u540D\n  const isAllowed = allowedDomains.some(allowed => {\n    if (allowed === 'null' || allowed === 'undefined') {\n      return origin === 'null' || !origin;\n    }\n    \n    try {\n      const allowedUrl = new URL(allowed);\n      const hostnameMatch = originUrl.hostname === allowedUrl.hostname;\n      const protocolMatch = originUrl.protocol === allowedUrl.protocol;\n      \n      if (DEBUG) {\n        console.log('Checking allowed domain:', {\n          allowed,\n          origin: origin,\n          hostnameMatch,\n          protocolMatch,\n          result: hostnameMatch && protocolMatch\n        });\n      }\n      \n      return hostnameMatch && protocolMatch;\n    } catch (error) {\n      if (DEBUG) console.log('Invalid allowed domain URL:', allowed, error.message);\n      return false;\n    }\n  });\n  \n  if (DEBUG) {\n    console.log('Origin validation result:', isAllowed);\n  }\n  \n  return isAllowed;\n}\n\n/**\n * \u83B7\u53D6\u7075\u6D3B\u7684CORS\u5934\uFF08\u4FEE\u590D\u7248\uFF09\n */\nfunction getFlexibleCorsHeaders(request, env) {\n  const origin = request.headers.get('origin');\n  const referer = request.headers.get('referer');\n  const allowedOrigins = env.ALLOWED_ORIGINS;\n  \n  // \u57FA\u7840CORS\u5934 - \u66F4\u5BBD\u677E\u7684\u914D\u7F6E\n  const baseCorsHeaders = {\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, HEAD',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, User-Agent, Cache-Control, Origin, Referer',\n    'Access-Control-Max-Age': '86400',\n  };\n  \n  // \u5982\u679C\u6709\u6709\u6548\u7684origin\u4E14\u5728\u767D\u540D\u5355\u4E2D\n  if (origin && origin !== 'null' && isValidOrigin(request, allowedOrigins)) {\n    return {\n      ...baseCorsHeaders,\n      'Access-Control-Allow-Origin': origin,\n      'Access-Control-Allow-Credentials': 'true',\n      'Vary': 'Origin',\n    };\n  }\n  \n  // \u5982\u679C\u6CA1\u6709origin\u4F46\u6709referer\uFF0C\u5C1D\u8BD5\u4F7F\u7528referer\n  if (!origin && referer && allowedOrigins) {\n    try {\n      const refererUrl = new URL(referer);\n      const refererOrigin = `${refererUrl.protocol}//${refererUrl.hostname}`;\n      \n      if (checkOriginAgainstAllowed(refererOrigin, allowedOrigins)) {\n        return {\n          ...baseCorsHeaders,\n          'Access-Control-Allow-Origin': refererOrigin,\n          'Access-Control-Allow-Credentials': 'true',\n          'Vary': 'Origin',\n        };\n      }\n    } catch (error) {\n      console.log('Failed to process referer as origin:', error.message);\n    }\n  }\n  \n  // \u5BF9\u4E8E\u76F4\u63A5\u6D4F\u89C8\u5668\u8BBF\u95EE\u6216origin\u4E3Anull\u7684\u60C5\u51B5\n  const userAgent = request.headers.get('user-agent') || '';\n  const isDirectBrowserAccess = userAgent.includes('Mozilla');\n  \n  if (isDirectBrowserAccess) {\n    console.log('Providing CORS headers for direct browser access');\n    return {\n      ...baseCorsHeaders,\n      'Access-Control-Allow-Origin': '*', // \u5BF9\u4E8E\u76F4\u63A5\u8BBF\u95EE\uFF0C\u5141\u8BB8\u6240\u6709origin\n      'Cache-Control': 'public, max-age=300'\n    };\n  }\n  \n  // \u9ED8\u8BA4\u8FD4\u56DE\u5BBD\u677E\u7684CORS\u5934\n  return {\n    ...baseCorsHeaders,\n    'Access-Control-Allow-Origin': '*'\n  };\n}\n\n/**\n * \u9A8C\u8BC1\u4EE3\u7406\u76EE\u6807\u57DF\u540D\u662F\u5426\u5728\u767D\u540D\u5355\u4E2D\n */\nfunction isValidProxyTarget(hostname, env) {\n  // \u5B9A\u4E49\u5141\u8BB8\u4EE3\u7406\u7684\u76EE\u6807\u57DF\u540D\u767D\u540D\u5355\n  const allowedTargets = [\n    'www.javbus.com',\n    'javbus.com', \n    'javdb.com',\n    'www.javdb.com',\n    'www.javlibrary.com',\n    'javlibrary.com',\n    'sukebei.nyaa.si',\n    'btsow.com',\n    'www.btsow.com',\n    'magnetdl.com',\n    'www.magnetdl.com',\n    'torrentkitty.tv',\n    'www.torrentkitty.tv',\n    'jable.tv',\n    'www.jable.tv',\n    'javmost.com',\n    'www.javmost.com',\n    'jav.guru',\n    'www.jav.guru',\n    'av01.tv',\n    'www.av01.tv',\n    'missav.com',\n    'www.missav.com',\n    'javhd.porn',\n    'www.javhd.porn',\n    'javgg.net',\n    'www.javgg.net',\n    'javhihi.com',\n    'www.javhihi.com',\n    'sehuatang.org',\n    'www.sehuatang.org',\n    't66y.com',\n    'www.t66y.com'\n  ];\n  \n  // \u5982\u679C\u73AF\u5883\u53D8\u91CF\u4E2D\u6709\u989D\u5916\u7684\u5141\u8BB8\u76EE\u6807\uFF0C\u4E5F\u52A0\u5165\u767D\u540D\u5355\n  const extraTargets = env.EXTRA_PROXY_TARGETS?.split(',').map(t => t.trim()) || [];\n  const allAllowedTargets = [...allowedTargets, ...extraTargets];\n  \n  return allAllowedTargets.includes(hostname.toLowerCase());\n}\n\nfunction logError(request, message) {\n  const clientIp = request.headers.get(\"cf-connecting-ip\");\n  const userAgent = request.headers.get(\"user-agent\");\n  const origin = request.headers.get(\"origin\") || request.headers.get(\"referer\");\n  \n  console.error(\n    `${message}, clientIp: ${clientIp}, origin: ${origin}, user-agent: ${userAgent}, url: ${request.url}`\n  );\n}\n\nfunction logDebug(request, message, env) {\n  if (env.DEBUG === 'true') {\n    const clientIp = request.headers.get(\"cf-connecting-ip\");\n    const origin = request.headers.get(\"origin\") || request.headers.get(\"referer\");\n    console.log(`DEBUG: ${message}, clientIp: ${clientIp}, origin: ${origin}, url: ${request.url}`);\n  }\n}\n\n/**\n * \u6539\u8FDB\u7684\u8BF7\u6C42\u5934\u5904\u7406\n */\nfunction createNewRequest(request, url, proxyHostname, originHostname) {\n  const newRequestHeaders = new Headers(request.headers);\n  \n  // \u8BBE\u7F6E\u6B63\u786E\u7684Host\u5934\n  newRequestHeaders.set('Host', proxyHostname);\n  \n  // \u8BBE\u7F6E\u6B63\u786E\u7684Referer\uFF08\u5982\u679C\u5B58\u5728\uFF09\n  const referer = newRequestHeaders.get('referer');\n  if (referer && referer.includes(originHostname)) {\n    const newReferer = referer.replace(\n      `${originHostname}/proxy/${proxyHostname}`,\n      proxyHostname\n    );\n    newRequestHeaders.set('referer', newReferer);\n  }\n  \n  // \u79FB\u9664\u53EF\u80FD\u5BFC\u81F4\u95EE\u9898\u7684\u5934\n  newRequestHeaders.delete('cf-connecting-ip');\n  newRequestHeaders.delete('cf-ray');\n  newRequestHeaders.delete('cf-ipcountry');\n  \n  return new Request(url.toString(), {\n    method: request.method,\n    headers: newRequestHeaders,\n    body: request.method !== 'GET' && request.method !== 'HEAD' ? request.body : null,\n    redirect: 'follow'\n  });\n}\n\nfunction escapeRegex(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/**\n * \u66F4\u5B89\u5168\u7684\u54CD\u5E94\u5934\u5904\u7406\uFF08\u4FEE\u590D\u7248\uFF09\n */\nfunction setResponseHeaders(\n  originalResponse,\n  proxyHostname,\n  originHostname,\n  DEBUG,\n  corsHeaders = {}\n) {\n  const newResponseHeaders = new Headers(originalResponse.headers);\n  \n  // \u53EA\u66FF\u6362\u7279\u5B9A\u7684\u54CD\u5E94\u5934\uFF0C\u4E0D\u8981\u5168\u90E8\u66FF\u6362\n  const headersToReplace = [\n    'location',\n    'content-location', \n    'content-base',\n    'refresh'\n  ];\n  \n  headersToReplace.forEach(headerName => {\n    const headerValue = newResponseHeaders.get(headerName);\n    if (headerValue && headerValue.includes(proxyHostname)) {\n      const newValue = headerValue.replace(\n        new RegExp(`https?://${escapeRegex(proxyHostname)}`, 'g'),\n        `https://${originHostname}/proxy/${proxyHostname}`\n      );\n      newResponseHeaders.set(headerName, newValue);\n    }\n  });\n  \n  // \u6DFB\u52A0 CORS\u5934\n  if (corsHeaders) {\n    Object.entries(corsHeaders).forEach(([key, value]) => {\n      newResponseHeaders.set(key, value);\n    });\n  }\n  \n  // \u79FB\u9664\u53EF\u80FD\u7684\u5B89\u5168\u9650\u5236\u5934\uFF08\u4EC5\u5728DEBUG\u6A21\u5F0F\u4E0B\uFF09\n  if (DEBUG === 'true') {\n    newResponseHeaders.delete(\"content-security-policy\");\n    newResponseHeaders.delete(\"x-frame-options\");\n  }\n  \n  // \u6DFB\u52A0\u5B89\u5168\u5934\n  newResponseHeaders.set('X-Content-Type-Options', 'nosniff');\n  newResponseHeaders.set('X-Frame-Options', 'SAMEORIGIN');\n  \n  return newResponseHeaders;\n}\n\n/**\n * \u667A\u80FD\u66FF\u6362\u54CD\u5E94\u5185\u5BB9\u4E2D\u7684URL\u5F15\u7528\uFF08\u4FEE\u590D\u7248\uFF09\n */\nasync function replaceResponseText(\n  originalResponse,\n  proxyHostname,\n  pathnameRegex,\n  originHostname\n) {\n  let text = await originalResponse.text();\n  \n  // \u4E0D\u8981\u7B80\u5355\u5730\u66FF\u6362\u6240\u6709\u57DF\u540D\u5F15\u7528\uFF0C\u800C\u662F\u8981\u667A\u80FD\u5904\u7406\u4E0D\u540C\u7C7B\u578B\u7684URL\n  \n  // 1. \u5904\u7406\u7EDD\u5BF9URL - \u5C06\u76EE\u6807\u7AD9\u70B9\u7684URL\u8F6C\u6362\u4E3A\u4EE3\u7406URL\n  // \u5339\u914D https://\u76EE\u6807\u57DF\u540D \u7684URL\n  const httpsUrlRegex = new RegExp(`https://${escapeRegex(proxyHostname)}`, 'g');\n  text = text.replace(httpsUrlRegex, `https://${originHostname}/proxy/${proxyHostname}`);\n  \n  // \u5339\u914D http://\u76EE\u6807\u57DF\u540D \u7684URL  \n  const httpUrlRegex = new RegExp(`http://${escapeRegex(proxyHostname)}`, 'g');\n  text = text.replace(httpUrlRegex, `https://${originHostname}/proxy/${proxyHostname}`);\n  \n  // 2. \u5904\u7406\u76F8\u5BF9\u534F\u8BAEURL - //\u76EE\u6807\u57DF\u540D\n  const protocolRelativeRegex = new RegExp(`//${escapeRegex(proxyHostname)}`, 'g');\n  text = text.replace(protocolRelativeRegex, `//${originHostname}/proxy/${proxyHostname}`);\n  \n  // 3. \u4E0D\u8981\u66FF\u6362\u7EAF\u57DF\u540D\u5F15\u7528\uFF0C\u56E0\u4E3A\u8FD9\u4F1A\u7834\u574F\u9875\u9762\u7ED3\u6784\n  // \u539F\u6765\u7684\u4EE3\u7801: text.replace(/\u76EE\u6807\u57DF\u540D/g, \u4EE3\u7406\u57DF\u540D) - \u8FD9\u662F\u9519\u8BEF\u7684\n  \n  return text;\n}\n\n/**\n * \u5904\u7406\u4EE3\u7406\u8BF7\u6C42\u7684\u6838\u5FC3\u903B\u8F91\uFF08\u4FEE\u590D\u7248\uFF09\n */\nasync function handleProxyRequest(request, env, targetHostname = null) {\n  logDebug(request, `Starting proxy request, targetHostname: ${targetHostname}`, env);\n  \n  // \u83B7\u53D6CORS\u5934 - \u4F7F\u7528\u66F4\u5BBD\u677E\u7684\u9A8C\u8BC1\n  const corsHeaders = getFlexibleCorsHeaders(request, env);\n  \n  const {\n    PROXY_HOSTNAME,\n    PROXY_PROTOCOL = \"https\",\n    PATHNAME_REGEX,\n    UA_WHITELIST_REGEX,\n    UA_BLACKLIST_REGEX,\n    URL302,\n    IP_WHITELIST_REGEX,\n    IP_BLACKLIST_REGEX,\n    REGION_WHITELIST_REGEX,\n    REGION_BLACKLIST_REGEX,\n    DEBUG = \"false\",\n  } = env;\n  \n  const url = new URL(request.url);\n  const originHostname = url.hostname;\n  \n  // \u786E\u5B9A\u4EE3\u7406\u76EE\u6807 - \u4F18\u5148\u4F7F\u7528\u4F20\u5165\u7684targetHostname\n  const proxyHostname = targetHostname || PROXY_HOSTNAME;\n  \n  // \u9A8C\u8BC1\u4EE3\u7406\u76EE\u6807\n  if (!proxyHostname) {\n    logError(request, \"Proxy hostname not configured\");\n    return new Response(JSON.stringify({\n      error: \"Proxy not configured\"\n    }), { \n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n  \n  logDebug(request, `Using proxy hostname: ${proxyHostname}`, env);\n  \n  if (!isValidProxyTarget(proxyHostname, env)) {\n    logError(request, `Invalid proxy target: ${proxyHostname}`);\n    return new Response(JSON.stringify({\n      error: \"Invalid proxy target\",\n      target: proxyHostname,\n      allowedTargets: env.DEBUG === 'true' ? 'Check server configuration' : undefined\n    }), { \n      status: 403,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n  \n  // \u9A8C\u8BC1\u8BBF\u95EE\u6761\u4EF6\n  const userAgent = request.headers.get(\"user-agent\")?.toLowerCase() || \"\";\n  const clientIp = request.headers.get(\"cf-connecting-ip\") || \"\";\n  const country = request.headers.get(\"cf-ipcountry\") || \"\";\n  \n  if (\n    (PATHNAME_REGEX && !new RegExp(PATHNAME_REGEX).test(url.pathname)) ||\n    (UA_WHITELIST_REGEX && !new RegExp(UA_WHITELIST_REGEX).test(userAgent)) ||\n    (UA_BLACKLIST_REGEX && new RegExp(UA_BLACKLIST_REGEX).test(userAgent)) ||\n    (IP_WHITELIST_REGEX && !new RegExp(IP_WHITELIST_REGEX).test(clientIp)) ||\n    (IP_BLACKLIST_REGEX && new RegExp(IP_BLACKLIST_REGEX).test(clientIp)) ||\n    (REGION_WHITELIST_REGEX && !new RegExp(REGION_WHITELIST_REGEX).test(country)) ||\n    (REGION_BLACKLIST_REGEX && new RegExp(REGION_BLACKLIST_REGEX).test(country))\n  ) {\n    logError(request, \"Access denied - validation failed\");\n    return URL302\n      ? Response.redirect(URL302, 302)\n      : new Response(await generateErrorPage(), {\n          status: 403,\n          headers: {\n            \"Content-Type\": \"text/html; charset=utf-8\",\n            ...corsHeaders\n          },\n        });\n  }\n  \n  // \u6784\u5EFA\u76EE\u6807URL\n  url.host = proxyHostname;\n  url.protocol = PROXY_PROTOCOL;\n  \n  logDebug(request, `Target URL: ${url.toString()}`, env);\n  \n  const newRequest = createNewRequest(request, url, proxyHostname, originHostname);\n  \n  try {\n    // \u53D1\u8D77\u4EE3\u7406\u8BF7\u6C42\n    const originalResponse = await fetch(newRequest, {\n      timeout: 30000, // 30\u79D2\u8D85\u65F6\n    });\n    \n    const newResponseHeaders = setResponseHeaders(\n      originalResponse,\n      proxyHostname,\n      originHostname,\n      DEBUG,\n      corsHeaders\n    );\n    \n    const contentType = newResponseHeaders.get(\"content-type\") || \"\";\n    let body;\n    \n    // \u5904\u7406\u54CD\u5E94\u5185\u5BB9\n    if (contentType.includes(\"text/\") && originalResponse.body) {\n      body = await replaceResponseText(\n        originalResponse,\n        proxyHostname,\n        PATHNAME_REGEX,\n        originHostname\n      );\n    } else {\n      body = originalResponse.body;\n    }\n    \n    return new Response(body, {\n      status: originalResponse.status,\n      statusText: originalResponse.statusText,\n      headers: newResponseHeaders,\n    });\n  } catch (error) {\n    logError(request, `Proxy request failed: ${error.message}`);\n    return new Response(JSON.stringify({\n      error: \"Proxy request failed\",\n      message: DEBUG === 'true' ? error.message : \"Service temporarily unavailable\",\n      target: proxyHostname\n    }), {\n      status: 502,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * \u751F\u6210\u9519\u8BEF\u9875\u9762\n */\nasync function generateErrorPage() {\n  return `<!DOCTYPE html>\n<html>\n<head>\n<title>Access Denied</title>\n<meta charset=\"utf-8\">\n<style>\nhtml { color-scheme: light dark; }\nbody { \n  width: 35em; \n  margin: 0 auto;\n  font-family: system-ui, -apple-system, sans-serif; \n  padding: 2rem;\n  text-align: center;\n  line-height: 1.6;\n}\n.status { \n  background: #fef2f2; \n  border: 1px solid #ef4444; \n  border-radius: 8px; \n  padding: 1.5rem; \n  margin: 1rem 0; \n}\nh1 { color: #dc2626; margin: 0 0 1rem 0; }\n.info { font-size: 0.9em; color: #666; margin-top: 2rem; }\n</style>\n</head>\n<body>\n<h1>\uD83D\uDEAB Access Denied</h1>\n<div class=\"status\">\n  <p><strong>\u8BBF\u95EE\u88AB\u62D2\u7EDD</strong></p>\n  <p>\u60A8\u7684\u8BF7\u6C42\u672A\u901A\u8FC7\u5B89\u5168\u9A8C\u8BC1\u3002</p>\n  <p>\u8BF7\u786E\u4FDD\u4ECE\u6388\u6743\u7684\u6765\u6E90\u8BBF\u95EE\u6B64\u670D\u52A1\u3002</p>\n</div>\n<div class=\"info\">\n  <p>\u5982\u9700\u5E2E\u52A9\uFF0C\u8BF7\u8054\u7CFB\u7BA1\u7406\u5458\u3002</p>\n  <p><small>Error Code: ORIGIN_NOT_ALLOWED</small></p>\n</div>\n</body>\n</html>`;\n}\n\n/**\n * \u5904\u7406\u5065\u5EB7\u68C0\u67E5\u8BF7\u6C42\uFF08\u4FEE\u590D\u7248\uFF09\n */\nasync function handleHealthCheck(request, env) {\n  const corsHeaders = getFlexibleCorsHeaders(request, env);\n  \n  const healthData = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: '2.1.3',\n    environment: env.ENVIRONMENT || 'production',\n    security: {\n      originValidation: 'flexible',\n      corsSupport: true,\n      directAccess: true,\n      domainWhitelist: true\n    },\n    features: {\n      proxy: !!env.PROXY_HOSTNAME,\n      dynamicProxy: true,\n      cors: true,\n      pathRouting: !!env.PATHNAME_REGEX,\n      geoBlocking: !!(env.REGION_WHITELIST_REGEX || env.REGION_BLACKLIST_REGEX),\n      ipFiltering: !!(env.IP_WHITELIST_REGEX || env.IP_BLACKLIST_REGEX),\n      userAgentFiltering: !!(env.UA_WHITELIST_REGEX || env.UA_BLACKLIST_REGEX)\n    }\n  };\n  \n  return new Response(JSON.stringify(healthData, null, 2), {\n    headers: {\n      'Content-Type': 'application/json',\n      ...corsHeaders\n    }\n  });\n}\n\n/**\n * \u5904\u7406API\u8DEF\u7531\n */\nasync function handleApiRoute(request, env) {\n  const url = new URL(request.url);\n  const path = url.pathname;\n  \n  // \u5065\u5EB7\u68C0\u67E5\u7AEF\u70B9\n  if (path === '/api/health' || path === '/_health') {\n    return handleHealthCheck(request, env);\n  }\n  \n  // \u4EE3\u7406\u72B6\u6001\u7AEF\u70B9\n  if (path === '/api/status') {\n    const corsHeaders = getFlexibleCorsHeaders(request, env);\n    \n    const status = {\n      proxyTarget: env.PROXY_HOSTNAME || 'not configured',\n      protocol: env.PROXY_PROTOCOL || 'https',\n      allowedOrigins: env.ALLOWED_ORIGINS || 'flexible',\n      timestamp: new Date().toISOString(),\n      debug: env.DEBUG === 'true',\n      security: 'flexible',\n      dynamicProxyEnabled: true,\n      version: '2.1.3',\n      cors: 'enhanced'\n    };\n    \n    return new Response(JSON.stringify(status, null, 2), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n  \n  const corsHeaders = getFlexibleCorsHeaders(request, env);\n  return new Response('API endpoint not found', { \n    status: 404,\n    headers: corsHeaders\n  });\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      \n      logDebug(request, `Request received for path: ${url.pathname}`, env);\n      \n      // \u9884\u68C0\u8BF7\u6C42\u7684\u7279\u6B8A\u5904\u7406 - \u786E\u4FDD\u6240\u6709CORS\u5934\u90FD\u6B63\u786E\u8FD4\u56DE\n      if (request.method === 'OPTIONS') {\n        const corsHeaders = getFlexibleCorsHeaders(request, env);\n        return new Response(null, { \n          headers: corsHeaders,\n          status: 204\n        });\n      }\n      \n      // \u5904\u7406API\u8DEF\u7531\n      if (url.pathname.startsWith('/api/') || url.pathname === '/_health') {\n        logDebug(request, `Handling API route: ${url.pathname}`, env);\n        return await handleApiRoute(request, env);\n      }\n      \n      // \u5904\u7406\u52A8\u6001\u4EE3\u7406\u8DEF\u7531 /proxy/{hostname}/{path}\n      if (url.pathname.startsWith('/proxy/')) {\n        logDebug(request, `Handling dynamic proxy route: ${url.pathname}`, env);\n        \n        const pathParts = url.pathname.substring(7).split('/'); // \u79FB\u9664 '/proxy/' \u524D\u7F00\n        const targetHostname = pathParts[0];\n        \n        if (!targetHostname) {\n          const corsHeaders = getFlexibleCorsHeaders(request, env);\n          logError(request, \"Invalid proxy URL: missing hostname\");\n          return new Response(JSON.stringify({\n            error: 'Invalid proxy URL: missing hostname',\n            expectedFormat: '/proxy/{hostname}/{path}'\n          }), { \n            status: 400,\n            headers: { \n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        // \u9A8C\u8BC1hostname\u683C\u5F0F\u548C\u767D\u540D\u5355\n        if (!/^[a-zA-Z0-9.-]+$/.test(targetHostname)) {\n          const corsHeaders = getFlexibleCorsHeaders(request, env);\n          logError(request, `Invalid hostname format: ${targetHostname}`);\n          return new Response(JSON.stringify({\n            error: 'Invalid hostname format',\n            hostname: targetHostname\n          }), { \n            status: 400,\n            headers: { \n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        if (!isValidProxyTarget(targetHostname, env)) {\n          const corsHeaders = getFlexibleCorsHeaders(request, env);\n          logError(request, `Forbidden proxy target: ${targetHostname}`);\n          return new Response(JSON.stringify({\n            error: 'Forbidden proxy target',\n            hostname: targetHostname,\n            message: '\u8BE5\u57DF\u540D\u4E0D\u5728\u4EE3\u7406\u767D\u540D\u5355\u4E2D'\n          }), { \n            status: 403,\n            headers: { \n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n        \n        // \u91CD\u6784\u8DEF\u5F84\uFF1A\u6B63\u786E\u5904\u7406\u5B50\u8DEF\u5F84\u548C\u67E5\u8BE2\u53C2\u6570\n        let targetPath = '/';\n        if (pathParts.length > 1) {\n          // \u79FB\u9664\u7A7A\u7684\u8DEF\u5F84\u6BB5\uFF0C\u6B63\u786E\u62FC\u63A5\u8DEF\u5F84\n          const pathSegments = pathParts.slice(1).filter(segment => segment);\n          if (pathSegments.length > 0) {\n            targetPath = '/' + pathSegments.join('/');\n          }\n        }\n        \n        // \u4FDD\u7559\u67E5\u8BE2\u53C2\u6570\u548Cfragment\n        if (url.search) {\n          targetPath += url.search;\n        }\n        if (url.hash) {\n          targetPath += url.hash;\n        }\n        \n        logDebug(request, `Dynamic proxy - target: ${targetHostname}, path: ${targetPath}`, env);\n        \n        // \u91CD\u5199\u8BF7\u6C42URL\n        const newUrl = new URL(request.url);\n        newUrl.pathname = targetPath;\n        \n        const modifiedRequest = new Request(newUrl.toString(), {\n          method: request.method,\n          headers: request.headers,\n          body: request.body\n        });\n        \n        // \u8C03\u7528\u4EE3\u7406\u5904\u7406\u51FD\u6570\uFF0C\u4F20\u5165\u76EE\u6807\u4E3B\u673A\u540D\n        return await handleProxyRequest(modifiedRequest, env, targetHostname);\n      }\n      \n      // \u5904\u7406\u4E3B\u4EE3\u7406\u903B\u8F91\uFF08\u9700\u8981\u914D\u7F6E PROXY_HOSTNAME\uFF09\n      logDebug(request, \"Handling main proxy logic\", env);\n      return await handleProxyRequest(request, env);\n      \n    } catch (error) {\n      logError(request, `Worker error: ${error.message}`);\n      \n      // \u8FD4\u56DE\u53CB\u597D\u7684\u9519\u8BEF\u54CD\u5E94\n      const errorResponse = {\n        error: 'Proxy service error',\n        message: env.DEBUG === 'true' ? error.message : 'Internal server error',\n        timestamp: new Date().toISOString(),\n        code: 'WORKER_ERROR',\n        version: '2.1.3'\n      };\n      \n      const corsHeaders = getFlexibleCorsHeaders(request, env);\n      \n      return new Response(JSON.stringify(errorResponse), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  },\n};"],
  "mappings": ";;;;AAMA,SAAS,cAAc,SAAS,gBAAgB;AAC9C,MAAI,CAAC,eAAgB,QAAO;AAE5B,QAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ;AAC3C,QAAM,UAAU,QAAQ,QAAQ,IAAI,SAAS;AAG7C,QAAM,QAAQ,QAAQ,KAAK,UAAU;AACrC,MAAI,OAAO;AACT,YAAQ,IAAI,sBAAsB;AAAA,MAChC;AAAA,MACA;AAAA,MACA,WAAW,QAAQ,QAAQ,IAAI,YAAY;AAAA,MAC3C,QAAQ,QAAQ;AAAA,IAClB,CAAC;AAAA,EACH;AAGA,MAAI,CAAC,UAAU,WAAW,QAAQ;AAEhC,UAAM,YAAY,QAAQ,QAAQ,IAAI,YAAY,KAAK;AACvD,UAAM,wBAAwB,UAAU,SAAS,SAAS;AAE1D,QAAI,uBAAuB;AACzB,UAAI,MAAO,SAAQ,IAAI,sDAAsD;AAC7E,aAAO;AAAA,IACT;AAGA,QAAI,SAAS;AACX,UAAI;AACF,cAAM,aAAa,IAAI,IAAI,OAAO;AAClC,cAAM,gBAAgB,GAAG,WAAW,QAAQ,KAAK,WAAW,QAAQ;AACpE,eAAO,0BAA0B,eAAe,gBAAgB,KAAK;AAAA,MACvE,SAAS,OAAO;AACd,YAAI,MAAO,SAAQ,IAAI,0CAA0C,MAAM,OAAO;AAAA,MAChF;AAAA,IACF;AAEA,QAAI,MAAO,SAAQ,IAAI,mDAAmD;AAC1E,WAAO;AAAA,EACT;AAEA,SAAO,0BAA0B,QAAQ,gBAAgB,KAAK;AAChE;AA5CS;AAiDT,SAAS,0BAA0B,QAAQ,gBAAgB,QAAQ,OAAO;AACxE,QAAM,iBAAiB,eAAe,MAAM,GAAG,EAAE,IAAI,YAAU,OAAO,KAAK,CAAC;AAG5E,MAAI;AACJ,MAAI;AACF,gBAAY,IAAI,IAAI,MAAM;AAAA,EAC5B,SAAS,OAAO;AACd,QAAI,MAAO,SAAQ,IAAI,uBAAuB,QAAQ,MAAM,OAAO;AACnE,WAAO;AAAA,EACT;AAGA,QAAM,YAAY,eAAe,KAAK,aAAW;AAC/C,QAAI,YAAY,UAAU,YAAY,aAAa;AACjD,aAAO,WAAW,UAAU,CAAC;AAAA,IAC/B;AAEA,QAAI;AACF,YAAM,aAAa,IAAI,IAAI,OAAO;AAClC,YAAM,gBAAgB,UAAU,aAAa,WAAW;AACxD,YAAM,gBAAgB,UAAU,aAAa,WAAW;AAExD,UAAI,OAAO;AACT,gBAAQ,IAAI,4BAA4B;AAAA,UACtC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAQ,iBAAiB;AAAA,QAC3B,CAAC;AAAA,MACH;AAEA,aAAO,iBAAiB;AAAA,IAC1B,SAAS,OAAO;AACd,UAAI,MAAO,SAAQ,IAAI,+BAA+B,SAAS,MAAM,OAAO;AAC5E,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,MAAI,OAAO;AACT,YAAQ,IAAI,6BAA6B,SAAS;AAAA,EACpD;AAEA,SAAO;AACT;AA7CS;AAkDT,SAAS,uBAAuB,SAAS,KAAK;AAC5C,QAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ;AAC3C,QAAM,UAAU,QAAQ,QAAQ,IAAI,SAAS;AAC7C,QAAM,iBAAiB,IAAI;AAG3B,QAAM,kBAAkB;AAAA,IACtB,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,0BAA0B;AAAA,EAC5B;AAGA,MAAI,UAAU,WAAW,UAAU,cAAc,SAAS,cAAc,GAAG;AACzE,WAAO;AAAA,MACL,GAAG;AAAA,MACH,+BAA+B;AAAA,MAC/B,oCAAoC;AAAA,MACpC,QAAQ;AAAA,IACV;AAAA,EACF;AAGA,MAAI,CAAC,UAAU,WAAW,gBAAgB;AACxC,QAAI;AACF,YAAM,aAAa,IAAI,IAAI,OAAO;AAClC,YAAM,gBAAgB,GAAG,WAAW,QAAQ,KAAK,WAAW,QAAQ;AAEpE,UAAI,0BAA0B,eAAe,cAAc,GAAG;AAC5D,eAAO;AAAA,UACL,GAAG;AAAA,UACH,+BAA+B;AAAA,UAC/B,oCAAoC;AAAA,UACpC,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,IAAI,wCAAwC,MAAM,OAAO;AAAA,IACnE;AAAA,EACF;AAGA,QAAM,YAAY,QAAQ,QAAQ,IAAI,YAAY,KAAK;AACvD,QAAM,wBAAwB,UAAU,SAAS,SAAS;AAE1D,MAAI,uBAAuB;AACzB,YAAQ,IAAI,kDAAkD;AAC9D,WAAO;AAAA,MACL,GAAG;AAAA,MACH,+BAA+B;AAAA;AAAA,MAC/B,iBAAiB;AAAA,IACnB;AAAA,EACF;AAGA,SAAO;AAAA,IACL,GAAG;AAAA,IACH,+BAA+B;AAAA,EACjC;AACF;AA3DS;AAgET,SAAS,mBAAmB,UAAU,KAAK;AAEzC,QAAM,iBAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAGA,QAAM,eAAe,IAAI,qBAAqB,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC,KAAK,CAAC;AAChF,QAAM,oBAAoB,CAAC,GAAG,gBAAgB,GAAG,YAAY;AAE7D,SAAO,kBAAkB,SAAS,SAAS,YAAY,CAAC;AAC1D;AA3CS;AA6CT,SAAS,SAAS,SAAS,SAAS;AAClC,QAAM,WAAW,QAAQ,QAAQ,IAAI,kBAAkB;AACvD,QAAM,YAAY,QAAQ,QAAQ,IAAI,YAAY;AAClD,QAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ,KAAK,QAAQ,QAAQ,IAAI,SAAS;AAE7E,UAAQ;AAAA,IACN,GAAG,OAAO,eAAe,QAAQ,aAAa,MAAM,iBAAiB,SAAS,UAAU,QAAQ,GAAG;AAAA,EACrG;AACF;AARS;AAUT,SAAS,SAAS,SAAS,SAAS,KAAK;AACvC,MAAI,IAAI,UAAU,QAAQ;AACxB,UAAM,WAAW,QAAQ,QAAQ,IAAI,kBAAkB;AACvD,UAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ,KAAK,QAAQ,QAAQ,IAAI,SAAS;AAC7E,YAAQ,IAAI,UAAU,OAAO,eAAe,QAAQ,aAAa,MAAM,UAAU,QAAQ,GAAG,EAAE;AAAA,EAChG;AACF;AANS;AAWT,SAAS,iBAAiB,SAAS,KAAK,eAAe,gBAAgB;AACrE,QAAM,oBAAoB,IAAI,QAAQ,QAAQ,OAAO;AAGrD,oBAAkB,IAAI,QAAQ,aAAa;AAG3C,QAAM,UAAU,kBAAkB,IAAI,SAAS;AAC/C,MAAI,WAAW,QAAQ,SAAS,cAAc,GAAG;AAC/C,UAAM,aAAa,QAAQ;AAAA,MACzB,GAAG,cAAc,UAAU,aAAa;AAAA,MACxC;AAAA,IACF;AACA,sBAAkB,IAAI,WAAW,UAAU;AAAA,EAC7C;AAGA,oBAAkB,OAAO,kBAAkB;AAC3C,oBAAkB,OAAO,QAAQ;AACjC,oBAAkB,OAAO,cAAc;AAEvC,SAAO,IAAI,QAAQ,IAAI,SAAS,GAAG;AAAA,IACjC,QAAQ,QAAQ;AAAA,IAChB,SAAS;AAAA,IACT,MAAM,QAAQ,WAAW,SAAS,QAAQ,WAAW,SAAS,QAAQ,OAAO;AAAA,IAC7E,UAAU;AAAA,EACZ,CAAC;AACH;AA3BS;AA6BT,SAAS,YAAY,QAAQ;AAC3B,SAAO,OAAO,QAAQ,uBAAuB,MAAM;AACrD;AAFS;AAOT,SAAS,mBACP,kBACA,eACA,gBACA,OACA,cAAc,CAAC,GACf;AACA,QAAM,qBAAqB,IAAI,QAAQ,iBAAiB,OAAO;AAG/D,QAAM,mBAAmB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,mBAAiB,QAAQ,gBAAc;AACrC,UAAM,cAAc,mBAAmB,IAAI,UAAU;AACrD,QAAI,eAAe,YAAY,SAAS,aAAa,GAAG;AACtD,YAAM,WAAW,YAAY;AAAA,QAC3B,IAAI,OAAO,YAAY,YAAY,aAAa,CAAC,IAAI,GAAG;AAAA,QACxD,WAAW,cAAc,UAAU,aAAa;AAAA,MAClD;AACA,yBAAmB,IAAI,YAAY,QAAQ;AAAA,IAC7C;AAAA,EACF,CAAC;AAGD,MAAI,aAAa;AACf,WAAO,QAAQ,WAAW,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACpD,yBAAmB,IAAI,KAAK,KAAK;AAAA,IACnC,CAAC;AAAA,EACH;AAGA,MAAI,UAAU,QAAQ;AACpB,uBAAmB,OAAO,yBAAyB;AACnD,uBAAmB,OAAO,iBAAiB;AAAA,EAC7C;AAGA,qBAAmB,IAAI,0BAA0B,SAAS;AAC1D,qBAAmB,IAAI,mBAAmB,YAAY;AAEtD,SAAO;AACT;AA9CS;AAmDT,eAAe,oBACb,kBACA,eACA,eACA,gBACA;AACA,MAAI,OAAO,MAAM,iBAAiB,KAAK;AAMvC,QAAM,gBAAgB,IAAI,OAAO,WAAW,YAAY,aAAa,CAAC,IAAI,GAAG;AAC7E,SAAO,KAAK,QAAQ,eAAe,WAAW,cAAc,UAAU,aAAa,EAAE;AAGrF,QAAM,eAAe,IAAI,OAAO,UAAU,YAAY,aAAa,CAAC,IAAI,GAAG;AAC3E,SAAO,KAAK,QAAQ,cAAc,WAAW,cAAc,UAAU,aAAa,EAAE;AAGpF,QAAM,wBAAwB,IAAI,OAAO,KAAK,YAAY,aAAa,CAAC,IAAI,GAAG;AAC/E,SAAO,KAAK,QAAQ,uBAAuB,KAAK,cAAc,UAAU,aAAa,EAAE;AAKvF,SAAO;AACT;AA3Be;AAgCf,eAAe,mBAAmB,SAAS,KAAK,iBAAiB,MAAM;AACrE,WAAS,SAAS,2CAA2C,cAAc,IAAI,GAAG;AAGlF,QAAM,cAAc,uBAAuB,SAAS,GAAG;AAEvD,QAAM;AAAA,IACJ;AAAA,IACA,iBAAiB;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,EACV,IAAI;AAEJ,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAM,iBAAiB,IAAI;AAG3B,QAAM,gBAAgB,kBAAkB;AAGxC,MAAI,CAAC,eAAe;AAClB,aAAS,SAAS,+BAA+B;AACjD,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,IACT,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AAEA,WAAS,SAAS,yBAAyB,aAAa,IAAI,GAAG;AAE/D,MAAI,CAAC,mBAAmB,eAAe,GAAG,GAAG;AAC3C,aAAS,SAAS,yBAAyB,aAAa,EAAE;AAC1D,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,gBAAgB,IAAI,UAAU,SAAS,+BAA+B;AAAA,IACxE,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AAGA,QAAM,YAAY,QAAQ,QAAQ,IAAI,YAAY,GAAG,YAAY,KAAK;AACtE,QAAM,WAAW,QAAQ,QAAQ,IAAI,kBAAkB,KAAK;AAC5D,QAAM,UAAU,QAAQ,QAAQ,IAAI,cAAc,KAAK;AAEvD,MACG,kBAAkB,CAAC,IAAI,OAAO,cAAc,EAAE,KAAK,IAAI,QAAQ,KAC/D,sBAAsB,CAAC,IAAI,OAAO,kBAAkB,EAAE,KAAK,SAAS,KACpE,sBAAsB,IAAI,OAAO,kBAAkB,EAAE,KAAK,SAAS,KACnE,sBAAsB,CAAC,IAAI,OAAO,kBAAkB,EAAE,KAAK,QAAQ,KACnE,sBAAsB,IAAI,OAAO,kBAAkB,EAAE,KAAK,QAAQ,KAClE,0BAA0B,CAAC,IAAI,OAAO,sBAAsB,EAAE,KAAK,OAAO,KAC1E,0BAA0B,IAAI,OAAO,sBAAsB,EAAE,KAAK,OAAO,GAC1E;AACA,aAAS,SAAS,mCAAmC;AACrD,WAAO,SACH,SAAS,SAAS,QAAQ,GAAG,IAC7B,IAAI,SAAS,MAAM,kBAAkB,GAAG;AAAA,MACtC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACP;AAGA,MAAI,OAAO;AACX,MAAI,WAAW;AAEf,WAAS,SAAS,eAAe,IAAI,SAAS,CAAC,IAAI,GAAG;AAEtD,QAAM,aAAa,iBAAiB,SAAS,KAAK,eAAe,cAAc;AAE/E,MAAI;AAEF,UAAM,mBAAmB,MAAM,MAAM,YAAY;AAAA,MAC/C,SAAS;AAAA;AAAA,IACX,CAAC;AAED,UAAM,qBAAqB;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,cAAc,mBAAmB,IAAI,cAAc,KAAK;AAC9D,QAAI;AAGJ,QAAI,YAAY,SAAS,OAAO,KAAK,iBAAiB,MAAM;AAC1D,aAAO,MAAM;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,OAAO;AACL,aAAO,iBAAiB;AAAA,IAC1B;AAEA,WAAO,IAAI,SAAS,MAAM;AAAA,MACxB,QAAQ,iBAAiB;AAAA,MACzB,YAAY,iBAAiB;AAAA,MAC7B,SAAS;AAAA,IACX,CAAC;AAAA,EACH,SAAS,OAAO;AACd,aAAS,SAAS,yBAAyB,MAAM,OAAO,EAAE;AAC1D,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,SAAS,UAAU,SAAS,MAAM,UAAU;AAAA,MAC5C,QAAQ;AAAA,IACV,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AACF;AA3Ie;AAgJf,eAAe,oBAAoB;AACjC,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCT;AAxCe;AA6Cf,eAAe,kBAAkB,SAAS,KAAK;AAC7C,QAAM,cAAc,uBAAuB,SAAS,GAAG;AAEvD,QAAM,aAAa;AAAA,IACjB,QAAQ;AAAA,IACR,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IAClC,SAAS;AAAA,IACT,aAAa,IAAI,eAAe;AAAA,IAChC,UAAU;AAAA,MACR,kBAAkB;AAAA,MAClB,aAAa;AAAA,MACb,cAAc;AAAA,MACd,iBAAiB;AAAA,IACnB;AAAA,IACA,UAAU;AAAA,MACR,OAAO,CAAC,CAAC,IAAI;AAAA,MACb,cAAc;AAAA,MACd,MAAM;AAAA,MACN,aAAa,CAAC,CAAC,IAAI;AAAA,MACnB,aAAa,CAAC,EAAE,IAAI,0BAA0B,IAAI;AAAA,MAClD,aAAa,CAAC,EAAE,IAAI,sBAAsB,IAAI;AAAA,MAC9C,oBAAoB,CAAC,EAAE,IAAI,sBAAsB,IAAI;AAAA,IACvD;AAAA,EACF;AAEA,SAAO,IAAI,SAAS,KAAK,UAAU,YAAY,MAAM,CAAC,GAAG;AAAA,IACvD,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,GAAG;AAAA,IACL;AAAA,EACF,CAAC;AACH;AA/Be;AAoCf,eAAe,eAAe,SAAS,KAAK;AAC1C,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAM,OAAO,IAAI;AAGjB,MAAI,SAAS,iBAAiB,SAAS,YAAY;AACjD,WAAO,kBAAkB,SAAS,GAAG;AAAA,EACvC;AAGA,MAAI,SAAS,eAAe;AAC1B,UAAMA,eAAc,uBAAuB,SAAS,GAAG;AAEvD,UAAM,SAAS;AAAA,MACb,aAAa,IAAI,kBAAkB;AAAA,MACnC,UAAU,IAAI,kBAAkB;AAAA,MAChC,gBAAgB,IAAI,mBAAmB;AAAA,MACvC,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,OAAO,IAAI,UAAU;AAAA,MACrB,UAAU;AAAA,MACV,qBAAqB;AAAA,MACrB,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,MAAM,CAAC,GAAG;AAAA,MACnD,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAGA;AAAA,MACL;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,cAAc,uBAAuB,SAAS,GAAG;AACvD,SAAO,IAAI,SAAS,0BAA0B;AAAA,IAC5C,QAAQ;AAAA,IACR,SAAS;AAAA,EACX,CAAC;AACH;AAtCe;AAwCf,IAAO,gBAAQ;AAAA,EACb,MAAM,MAAM,SAAS,KAAK,KAAK;AAC7B,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAE/B,eAAS,SAAS,8BAA8B,IAAI,QAAQ,IAAI,GAAG;AAGnE,UAAI,QAAQ,WAAW,WAAW;AAChC,cAAM,cAAc,uBAAuB,SAAS,GAAG;AACvD,eAAO,IAAI,SAAS,MAAM;AAAA,UACxB,SAAS;AAAA,UACT,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AAGA,UAAI,IAAI,SAAS,WAAW,OAAO,KAAK,IAAI,aAAa,YAAY;AACnE,iBAAS,SAAS,uBAAuB,IAAI,QAAQ,IAAI,GAAG;AAC5D,eAAO,MAAM,eAAe,SAAS,GAAG;AAAA,MAC1C;AAGA,UAAI,IAAI,SAAS,WAAW,SAAS,GAAG;AACtC,iBAAS,SAAS,iCAAiC,IAAI,QAAQ,IAAI,GAAG;AAEtE,cAAM,YAAY,IAAI,SAAS,UAAU,CAAC,EAAE,MAAM,GAAG;AACrD,cAAM,iBAAiB,UAAU,CAAC;AAElC,YAAI,CAAC,gBAAgB;AACnB,gBAAM,cAAc,uBAAuB,SAAS,GAAG;AACvD,mBAAS,SAAS,qCAAqC;AACvD,iBAAO,IAAI,SAAS,KAAK,UAAU;AAAA,YACjC,OAAO;AAAA,YACP,gBAAgB;AAAA,UAClB,CAAC,GAAG;AAAA,YACF,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,GAAG;AAAA,YACL;AAAA,UACF,CAAC;AAAA,QACH;AAGA,YAAI,CAAC,mBAAmB,KAAK,cAAc,GAAG;AAC5C,gBAAM,cAAc,uBAAuB,SAAS,GAAG;AACvD,mBAAS,SAAS,4BAA4B,cAAc,EAAE;AAC9D,iBAAO,IAAI,SAAS,KAAK,UAAU;AAAA,YACjC,OAAO;AAAA,YACP,UAAU;AAAA,UACZ,CAAC,GAAG;AAAA,YACF,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,GAAG;AAAA,YACL;AAAA,UACF,CAAC;AAAA,QACH;AAEA,YAAI,CAAC,mBAAmB,gBAAgB,GAAG,GAAG;AAC5C,gBAAM,cAAc,uBAAuB,SAAS,GAAG;AACvD,mBAAS,SAAS,2BAA2B,cAAc,EAAE;AAC7D,iBAAO,IAAI,SAAS,KAAK,UAAU;AAAA,YACjC,OAAO;AAAA,YACP,UAAU;AAAA,YACV,SAAS;AAAA,UACX,CAAC,GAAG;AAAA,YACF,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,GAAG;AAAA,YACL;AAAA,UACF,CAAC;AAAA,QACH;AAGA,YAAI,aAAa;AACjB,YAAI,UAAU,SAAS,GAAG;AAExB,gBAAM,eAAe,UAAU,MAAM,CAAC,EAAE,OAAO,aAAW,OAAO;AACjE,cAAI,aAAa,SAAS,GAAG;AAC3B,yBAAa,MAAM,aAAa,KAAK,GAAG;AAAA,UAC1C;AAAA,QACF;AAGA,YAAI,IAAI,QAAQ;AACd,wBAAc,IAAI;AAAA,QACpB;AACA,YAAI,IAAI,MAAM;AACZ,wBAAc,IAAI;AAAA,QACpB;AAEA,iBAAS,SAAS,2BAA2B,cAAc,WAAW,UAAU,IAAI,GAAG;AAGvF,cAAM,SAAS,IAAI,IAAI,QAAQ,GAAG;AAClC,eAAO,WAAW;AAElB,cAAM,kBAAkB,IAAI,QAAQ,OAAO,SAAS,GAAG;AAAA,UACrD,QAAQ,QAAQ;AAAA,UAChB,SAAS,QAAQ;AAAA,UACjB,MAAM,QAAQ;AAAA,QAChB,CAAC;AAGD,eAAO,MAAM,mBAAmB,iBAAiB,KAAK,cAAc;AAAA,MACtE;AAGA,eAAS,SAAS,6BAA6B,GAAG;AAClD,aAAO,MAAM,mBAAmB,SAAS,GAAG;AAAA,IAE9C,SAAS,OAAO;AACd,eAAS,SAAS,iBAAiB,MAAM,OAAO,EAAE;AAGlD,YAAM,gBAAgB;AAAA,QACpB,OAAO;AAAA,QACP,SAAS,IAAI,UAAU,SAAS,MAAM,UAAU;AAAA,QAChD,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QAClC,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAEA,YAAM,cAAc,uBAAuB,SAAS,GAAG;AAEvD,aAAO,IAAI,SAAS,KAAK,UAAU,aAAa,GAAG;AAAA,QACjD,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,GAAG;AAAA,QACL;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": ["corsHeaders"]
}
